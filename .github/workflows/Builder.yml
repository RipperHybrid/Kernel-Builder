name: Kernel Builder

on:
  workflow_dispatch:
    inputs:
      trigger_kernel_builder:
        description: 'Flag to trigger kernel builder'
        required: true
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        version: ["LineageOS-20", "Zenitsu", "DivestOS-13", "Lava"]

    env:
      VERSION: ${{ matrix.version }}
      ARCH: arm64
      KBUILD_BUILD_HOST: Github-Action
      KBUILD_BUILD_USER: "KernelSU_Builder"
      CLANG_PATH: ${{ github.workspace }}/kernel/clang/bin

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get Last Commit Message
        run: |
          last_commit_message=$(git log -1 --pretty=%B)
          echo "COMMIT=$last_commit_message" >> $GITHUB_ENV
          echo "Last commit message is: $COMMIT"

      - name: Notify Job Start with Last Commit Message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.PERSONAL_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            New job started for Kernel: ${{ matrix.version }}
            Last commit: ${{ env.COMMIT }}
              
      - name: Setup Environment
        run: |
           sudo apt update
           sudo apt-get install -y llvm
           sudo apt install -y python3-pip jq libarchive-tools zip lib32z-dev libghc-bzlib-dev pngcrush ^liblzma.* python-is-python3 libsdl1.2-dev autoconf libxml2-utils wget pkg-config unzip w3m gawk imagemagick libc6-dev gcc-multilib patchelf gzip clang subversion optipng device-tree-compiler ccache gcc ^liblz4-.* lzip rsync automake fastboot python2.7 patch zip pngquant expat lzop libswitch-perl make libcap-dev python2 adb libxml2 bison libxml-simple-perl zlib1g-dev libarchive-tools libtool squashfs-tools gperf ^lzma.* libfl-dev ncurses-dev pwgen flex libtinfo5 minicom liblz4-tool libmpfr-dev libssl-dev lib32ncurses5-dev libbz2-dev lib32z1-dev libgmp-dev git libncurses5-dev dpkg-dev libmpc-dev lftp python2-dev python3 rar git-lfs policycoreutils unrar libncurses5 libbz2-1.0 ncftp tree python-all-dev bzip2 bc ftp software-properties-common tar libgl1-mesa-dev texinfo schedtool curl libexpat1-dev libc6-dev-i386 apt-utils cmake g++-multilib build-essential re2c axel maven xsltproc g++ libx11-dev libxml-sax-base-perl gnupg bash
           sudo pip3 install yq
           echo "/usr/lib/ccache" >> $GITHUB_PATH
           echo "USE_CCACHE=1" >> $GITHUB_ENV
           echo "${{ matrix.version }}: Set up the environment Done."

      - name: Cache ccache
        uses: actions/cache@v2
        id: cache_ccache
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
              ${{ runner.os }}-ccache-
           
      - name: Clone Sources
        run: |
          VERSION="${{ matrix.version }}"
          chmod +x clone.sh
          ./clone.sh "${{ github.workspace }}"
        env:
          VERSION: ${{ matrix.version }}
          echo "${{ matrix.version }}: Cloned sources."

      - name: Add Clang to PATH
        run: |
          echo "${CLANG_PATH}" >> $GITHUB_PATH
          echo "${{ matrix.version }}: Added Clang to PATH."

      - name: Extract kernel version from Makefile
        run: |
          VERSION="${{ matrix.version }}"
          chmod +x ExVersion.sh
          ./ExVersion.sh "${{ github.workspace }}"
        env:
         VERSION: ${{ matrix.version }}

      - name: Extract sources
        run: |
          VERSION="${{ matrix.version }}"
          chmod +x ExSource.sh
          ./ExSource.sh "${{ github.workspace }}" "$VERSION"
        env:
          VERSION: ${{ matrix.version }}
          echo "${{ matrix.version }}: Extracted sources."

      - name: Compile kernel
        run: |
          VERSION="${{ matrix.version }}"
          chmod +x build.sh
          ./build.sh "${{ github.workspace }}" "$VERSION"
        env:
          VERSION: ${{ matrix.version }}
          echo "${{ matrix.version }}: Compiled kernel."

      - name: Make output directory for kernel
        run: |
          mkdir outw
          mkdir outw/false
          mkdir outw/true
          echo "${{ matrix.version }}: Made output directory for kernel."
          
      - name: Move kernel without KernelSU support to output directory
        run: |
          VERSION="${{ matrix.version }}"
          chmod +x move.sh
          ./move.sh "${{ github.workspace }}"
        env:
          VERSION: ${{ matrix.version }}
          echo "${{ matrix.version }}: Moved kernel without KernelSU support to the output directory."

      - name: Clean build environment
        run: |
          VERSION="${{ matrix.version }}"
          chmod +x clean.sh
          ./clean.sh "${{ github.workspace }}"
        env:
          VERSION: ${{ matrix.version }}
          echo "${{ matrix.version }}: Cleaned build environment."

      - name: Set KERNELSU environment variable to true
        run: |
           echo "KERNELSU=true" >> $GITHUB_ENV
           echo "${{ matrix.version }}: Set KERNELSU environment variable to true."

      - name: Set KERNELSU_VERSION environment variable
        run: |
          version=$(cat ksu_version.txt)
          echo "KERNELSU_VERSION=$version" >> $GITHUB_ENV
          echo "Read KERNELSU_VERSION: $version"

      - name: Add KernelSU support to kernel
        run: |
          VERSION="${{ matrix.version }}"
          chmod +x kernelSU.sh
          ./kernelSU.sh "${{ github.workspace }}"
        env:
          VERSION: ${{ matrix.version }}
          echo "${{ matrix.version }}: Added KernelSU support to the kernel."

      - name: Compile kernel with KernelSU support
        run: |
          VERSION="${{ matrix.version }}"
          chmod +x build.sh
          ./build.sh "${{ github.workspace }}"
        env:
          VERSION: ${{ matrix.version }}
          echo "${{ matrix.version }}: Compiled kernel with KernelSU support."

      - name: Move kernel with KernelSU support to output directory
        run: |
          VERSION="${{ matrix.version }}"
          chmod +x move.sh
          ./move.sh "${{ github.workspace }}"
        env:
          VERSION: ${{ matrix.version }}
          echo "${{ matrix.version }}: Moved kernel with KernelSU support to the output directory."

      - name: Clone AnyKernel3
        run: |
          VERSION="${{ matrix.version }}"
          chmod +x anykernel.sh
          ./anykernel.sh "${{ github.workspace }}"
        env:
          VERSION: ${{ matrix.version }}
          echo "${{ matrix.version }}: Cloned AnyKernel3 repository."

      - name: Set Build Date # For Build Date Info, currently using Asia/Manila
        run: |
          echo "BUILD_DATE=$(TZ=Asia/Manila date +'%d-%m-%Y')" >> $GITHUB_ENV
          
      - name: Set ZIP_NO_KSU and ZIP_KSU environment variables
        run: |
          echo "ZIP_NO_KSU=${{ env.VERSION }}-NoKernelSU-${{ env.BUILD_DATE }}.zip" >> $GITHUB_ENV
          echo "ZIP_KSU=${{ env.VERSION }}-KernelSU-$(cat ksu_version.txt)-${{ env.BUILD_DATE }}.zip" >> $GITHUB_ENV
          echo "${{ matrix.version }}: Set ZIP_NO_KSU and ZIP_KSU environment variables."
 
      - name: Make AnyKernel3 zip
        run: |
          chmod +x makezip.sh
          ./makezip.sh
          echo "${{ matrix.version }}: Made AnyKernel3 zip."
        env:
         BUILD_DATE: ${{ env.BUILD_DATE }}
         ZIP_NO_KSU: ${{ env.ZIP_NO_KSU }}
         ZIP_KSU: ${{ env.ZIP_KSU }}

      - name: Make a release
        uses: softprops/action-gh-release@v1
        with:
          files: |
             ${{ github.workspace }}/${{ env.ZIP_NO_KSU }}
             ${{ github.workspace }}/${{ env.ZIP_KSU }}
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Realme 8 (nashc) ${{ matrix.version }} Kernel Release - ${{ env.BUILD_DATE }}
          tag_name: ${{ matrix.version }}-${{ github.run_id }}
          body: |
             **Info:**
              - KernelSU Version: ${{ env.KERNELSU_VERSION }}.
              - Kernel Version:
                - ${{ matrix.version }}: ${{ env.KERNEL_VERSION }}
                
             **Source URLs:**
             - ${{ matrix.version }}: ${{ env.KERNEL_URL}}

             **Build Date:**
             - Release Date: ${{ env.BUILD_DATE}}

             **Installation:**
             1. Sideloading in recovery mode.
             2. Refer to our [Mega Guide](https://github.com/driedpampas/realme-8-megaguide) for detailed instructions.

             **Warnings:**
             - Do not use this kernel with the stock firmware of Realme UI; it is only compatible with custom ROMs.

             **Support Group:**
             - Support: Ask In [Realme 8 AOSP](https://t.me/Realme8AOSPGroup) for assistance

      - name: Upload Kernel Files to Telegram
        run: |
          curl -F document=@${{ github.workspace }}/${{ env.ZIP_NO_KSU }} -F caption="Kernel Version: ${{ env.KERNEL_VERSION }} - Kernel without KernelSU" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument?chat_id=${{ secrets.PERSONAL_CHAT_ID }}"
          curl -F document=@${{ github.workspace }}/${{ env.ZIP_KSU }} -F caption="Kernel Version: ${{ env.KERNEL_VERSION }} - Kernel with KernelSU" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument?chat_id=${{ secrets.PERSONAL_CHAT_ID }}"
