name: Version Tracker & Deploy

on:
  push:
    branches:
      - Master
  schedule:
    - cron: '0 */12 * * *'  # Scheduled to run every 12 hours

jobs:
  check_and_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check for new release and trigger build if needed
        id: check_and_trigger_build
        run: |
          LATEST_RELEASE=$(curl --silent "https://api.github.com/repos/tiann/KernelSU/releases/latest" | jq -r .tag_name)
          CURRENT_RELEASE=$(cat ksu_version.txt || true)
          if [ "$LATEST_RELEASE" != "$CURRENT_RELEASE" ]; then
            echo "LATEST_RELEASE=${LATEST_RELEASE}" >> $GITHUB_ENV
            echo "update_needed=true" >> $GITHUB_ENV
          else
            echo "update_needed=false" >> $GITHUB_ENV
          fi

      - name: Update version and trigger build if needed
        if: env.update_needed == 'true' || github.event_name == 'push'
        run: |
          echo "${LATEST_RELEASE}" > ksu_version.txt
          if [ "${LATEST_RELEASE}" = "" ]; then
            echo "Version is not updated. No build triggered."
          else
            echo "Version updated. Triggering build..."
            # Delete old releases and tags
            releases=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases")
            release_ids=$(echo $releases | jq '.[].id')

            for id in $release_ids; do
              curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/$id"
              echo "Deleted release with ID: $id"
            done

            tags=$(git ls-remote --tags origin)
            tag_names=$(echo "$tags" | awk -F/ '{print $3}')

            for tag in $tag_names; do
              git push --delete origin $tag
              echo "Deleted tag: $tag"
            done

            # Trigger Kernel Builder Workflow
            gh workflow run Kernel-Builder.yml -R ${{ github.repository }} -F trigger_kernel_builder=true
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
